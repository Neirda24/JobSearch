<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollaboratorRepository extends EntityRepository implements TokenStorageAwareRepository
{
    /**
     * @var TokenStorageInterface
     */
    private $tokenStorage;

    /**
     * @param TokenStorageInterface $tokenStorage
     */
    public function setTokenStorage(TokenStorageInterface $tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @return User
     * @throws AccessDeniedException
     */
    private function getUser()
    {
        if (null === $token = $this->tokenStorage->getToken()) {
            throw new AccessDeniedException('You must be connected to access this resource.');
        }

        if (!is_object($user = $token->getUser())) {
            throw new AccessDeniedException('You must be connected to access this resource.');
        }

        return $user;
    }

    /**
     * @param User $user
     *
     * @return QueryBuilder
     */
    public function fetchByUserQB(User $user)
    {
        $qb = $this->createQueryBuilder('c');

        $qb
            ->leftJoin('c.searchDetails', 'sd')
            ->leftJoin('sd.search', 's')
            ->leftJoin('s.owner', 'u')
            ->where($qb->expr()->eq('u', ':user'))
            ->setParameter('user', $user)
            ->orderBy('c.firstname');

        return $qb;
    }

    /**
     * @return QueryBuilder
     *
     * @throws AccessDeniedException
     */
    public function fetchByCurrentUserQB()
    {
        return $this->fetchByUserQB($this->getUser());
    }
}
